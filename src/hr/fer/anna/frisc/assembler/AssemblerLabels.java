
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 02 13:43:33 CEST 2009
//----------------------------------------------------

package hr.fer.anna.frisc.assembler;

import java.util.Queue;
import java.util.LinkedList;
import hr.fer.anna.GUI.Postman;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 02 13:43:33 CEST 2009
  */
public class AssemblerLabels extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AssemblerLabels() {super();}

  /** Constructor which sets the default scanner. */
  public AssemblerLabels(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AssemblerLabels(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\003\006" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\002\000\002\005\003\000\002\005\002\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\027\003\000\002\027\002\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\011\004\000\002\011\004\000\002\010\010\000\002\010" +
    "\007\000\002\026\004\000\002\012\003\000\002\012\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\021\003\000\002\021\003\000\002\013\010\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\014\006\000" +
    "\002\015\010\000\002\015\012\000\002\015\004\000\002" +
    "\015\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\002" +
    "\000\002\017\005\000\002\017\007\000\002\017\005\000" +
    "\002\017\005\000\002\017\007\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\036\002\ufff5\003\005\050\ufff5\051\ufff5\052" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\111\010" +
    "\112\ufff5\117\006\120\ufff5\001\002\000\006\002\uffff\112" +
    "\251\001\002\000\006\002\ufff7\112\ufff7\001\002\000\124" +
    "\002\ufff6\013\060\014\061\015\072\016\033\017\044\020" +
    "\047\021\051\022\036\023\024\024\021\025\064\026\046" +
    "\027\042\030\063\031\030\032\041\033\035\034\032\035" +
    "\062\036\057\037\034\040\027\041\016\042\074\043\053" +
    "\044\025\045\056\046\054\047\050\050\ufff6\051\ufff6\052" +
    "\ufff6\053\244\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\112\ufff6\120\ufff6\001\002\000\030\002\ufff3\050\037\051" +
    "\073\052\055\054\075\055\070\056\067\057\026\060\022" +
    "\112\ufff3\120\031\001\002\000\124\002\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\112\ufff5\117\014\120\ufff5\001" +
    "\002\000\004\002\013\001\002\000\006\002\ufff9\112\ufff9" +
    "\001\002\000\004\002\001\001\002\000\124\002\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\234" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\112\ufff6\120" +
    "\ufff6\001\002\000\122\002\ufff3\013\060\014\061\015\072" +
    "\016\033\017\044\020\047\021\051\022\036\023\024\024" +
    "\021\025\064\026\046\027\042\030\063\031\030\032\041" +
    "\033\035\034\032\035\062\036\057\037\034\040\027\041" +
    "\016\042\074\043\053\044\025\045\056\046\054\047\050" +
    "\050\037\051\073\052\055\054\075\055\070\056\067\057" +
    "\026\060\022\112\ufff3\120\031\001\002\000\070\005\uffa1" +
    "\010\uffa1\065\120\066\117\067\132\070\130\071\136\072" +
    "\135\073\140\074\134\075\126\076\124\077\133\100\115" +
    "\101\131\102\127\103\122\104\141\105\125\106\123\107" +
    "\121\110\137\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1" +
    "\001\002\000\010\002\ufff3\112\ufff3\120\031\001\002\000" +
    "\010\002\uffd6\112\uffd6\120\uffd6\001\002\000\004\011\uffc9" +
    "\001\002\000\016\010\076\113\uffed\114\uffed\115\uffed\116" +
    "\uffed\117\uffed\001\002\000\006\002\ufffa\112\ufffa\001\002" +
    "\000\004\011\uffca\001\002\000\060\002\uffa1\065\120\066" +
    "\117\067\132\070\130\071\136\072\135\073\140\074\134" +
    "\075\126\076\124\077\133\100\115\101\131\102\127\103" +
    "\122\104\141\105\125\106\123\107\121\110\137\112\uffa1" +
    "\120\uffa1\001\002\000\016\010\076\113\uffed\114\uffed\115" +
    "\uffed\116\uffed\117\uffed\001\002\000\004\011\222\001\002" +
    "\000\004\011\uffc0\001\002\000\006\002\ufff4\112\ufff4\001" +
    "\002\000\004\011\uffbd\001\002\000\004\011\uffce\001\002" +
    "\000\004\011\221\001\002\000\004\011\uffbe\001\002\000" +
    "\004\011\uffcb\001\002\000\012\061\114\062\113\063\110" +
    "\064\112\001\002\000\010\002\ufff3\112\ufff3\120\031\001" +
    "\002\000\004\011\uffbf\001\002\000\004\011\uffc6\001\002" +
    "\000\010\002\uffd9\112\uffd9\120\uffd9\001\002\000\004\011" +
    "\214\001\002\000\004\011\206\001\002\000\004\011\uffc7" +
    "\001\002\000\004\011\uffcd\001\002\000\060\002\uffa1\065" +
    "\120\066\117\067\132\070\130\071\136\072\135\073\140" +
    "\074\134\075\126\076\124\077\133\100\115\101\131\102" +
    "\127\103\122\104\141\105\125\106\123\107\121\110\137" +
    "\112\uffa1\120\uffa1\001\002\000\004\011\uffcc\001\002\000" +
    "\004\011\173\001\002\000\070\005\uffa1\010\uffa1\065\120" +
    "\066\117\067\132\070\130\071\136\072\135\073\140\074" +
    "\134\075\126\076\124\077\133\100\115\101\131\102\127" +
    "\103\122\104\141\105\125\106\123\107\121\110\137\113" +
    "\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\001\002\000\060" +
    "\002\uffa1\065\120\066\117\067\132\070\130\071\136\072" +
    "\135\073\140\074\134\075\126\076\124\077\133\100\115" +
    "\101\131\102\127\103\122\104\141\105\125\106\123\107" +
    "\121\110\137\112\uffa1\120\uffa1\001\002\000\010\002\uffdf" +
    "\112\uffdf\120\uffdf\001\002\000\060\002\uffa1\065\120\066" +
    "\117\067\132\070\130\071\136\072\135\073\140\074\134" +
    "\075\126\076\124\077\133\100\115\101\131\102\127\103" +
    "\122\104\141\105\125\106\123\107\121\110\137\112\uffa1" +
    "\120\uffa1\001\002\000\004\011\uffbb\001\002\000\004\011" +
    "\uffd1\001\002\000\004\011\uffd0\001\002\000\004\011\uffbc" +
    "\001\002\000\022\010\076\011\152\012\153\113\uffed\114" +
    "\uffed\115\uffed\116\uffed\117\uffed\001\002\000\004\011\uffc8" +
    "\001\002\000\010\002\uffd7\112\uffd7\120\uffd7\001\002\000" +
    "\010\002\uffd8\112\uffd8\120\uffd8\001\002\000\016\010\076" +
    "\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000" +
    "\016\010\076\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed" +
    "\001\002\000\010\002\uffd5\112\uffd5\120\uffd5\001\002\000" +
    "\004\011\uffcf\001\002\000\016\010\076\113\uffed\114\uffed" +
    "\115\uffed\116\uffed\117\uffed\001\002\000\066\010\uffa1\065" +
    "\120\066\117\067\132\070\130\071\136\072\135\073\140" +
    "\074\134\075\126\076\124\077\133\100\115\101\131\102" +
    "\127\103\122\104\141\105\125\106\123\107\121\110\137" +
    "\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\001\002\000" +
    "\016\010\076\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed" +
    "\001\002\000\012\061\114\062\113\063\110\064\112\001" +
    "\002\000\010\002\uffde\112\uffde\120\uffde\001\002\000\014" +
    "\113\102\114\104\115\107\116\106\117\103\001\002\000" +
    "\014\113\uffee\114\uffee\115\uffee\116\uffee\117\uffee\001\002" +
    "\000\014\002\uffea\004\uffea\006\uffea\112\uffea\120\uffea\001" +
    "\002\000\014\002\uffe7\004\uffe7\006\uffe7\112\uffe7\120\uffe7" +
    "\001\002\000\014\002\uffe9\004\uffe9\006\uffe9\112\uffe9\120" +
    "\uffe9\001\002\000\014\002\uffe8\004\uffe8\006\uffe8\112\uffe8" +
    "\120\uffe8\001\002\000\014\002\uffec\004\uffec\006\uffec\112" +
    "\uffec\120\uffec\001\002\000\014\002\uffeb\004\uffeb\006\uffeb" +
    "\112\uffeb\120\uffeb\001\002\000\022\002\ufff0\112\ufff0\113" +
    "\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\001\002" +
    "\000\014\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\001" +
    "\002\000\022\002\uffef\112\uffef\113\uffef\114\uffef\115\uffef" +
    "\116\uffef\117\uffef\120\uffef\001\002\000\022\002\ufff1\112" +
    "\ufff1\113\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1" +
    "\001\002\000\022\002\ufff2\112\ufff2\113\ufff2\114\ufff2\115" +
    "\ufff2\116\ufff2\117\ufff2\120\ufff2\001\002\000\026\002\uffaa" +
    "\005\uffaa\010\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa\116" +
    "\uffaa\117\uffaa\120\uffaa\001\002\000\016\010\076\113\uffed" +
    "\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000\026\002" +
    "\uffb4\005\uffb4\010\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\001\002\000\026\002\uffb5\005" +
    "\uffb5\010\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5" +
    "\117\uffb5\120\uffb5\001\002\000\026\002\uffa3\005\uffa3\010" +
    "\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3" +
    "\120\uffa3\001\002\000\026\002\uffa7\005\uffa7\010\uffa7\112" +
    "\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7" +
    "\001\002\000\026\002\uffa4\005\uffa4\010\uffa4\112\uffa4\113" +
    "\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\001\002" +
    "\000\026\002\uffac\005\uffac\010\uffac\112\uffac\113\uffac\114" +
    "\uffac\115\uffac\116\uffac\117\uffac\120\uffac\001\002\000\026" +
    "\002\uffa5\005\uffa5\010\uffa5\112\uffa5\113\uffa5\114\uffa5\115" +
    "\uffa5\116\uffa5\117\uffa5\120\uffa5\001\002\000\026\002\uffad" +
    "\005\uffad\010\uffad\112\uffad\113\uffad\114\uffad\115\uffad\116" +
    "\uffad\117\uffad\120\uffad\001\002\000\026\002\uffa8\005\uffa8" +
    "\010\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117" +
    "\uffa8\120\uffa8\001\002\000\026\002\uffb2\005\uffb2\010\uffb2" +
    "\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120" +
    "\uffb2\001\002\000\026\002\uffa9\005\uffa9\010\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\001" +
    "\002\000\026\002\uffb3\005\uffb3\010\uffb3\112\uffb3\113\uffb3" +
    "\114\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3\001\002\000" +
    "\026\002\uffab\005\uffab\010\uffab\112\uffab\113\uffab\114\uffab" +
    "\115\uffab\116\uffab\117\uffab\120\uffab\001\002\000\026\002" +
    "\uffae\005\uffae\010\uffae\112\uffae\113\uffae\114\uffae\115\uffae" +
    "\116\uffae\117\uffae\120\uffae\001\002\000\026\002\uffb0\005" +
    "\uffb0\010\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0" +
    "\117\uffb0\120\uffb0\001\002\000\026\002\uffb1\005\uffb1\010" +
    "\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1" +
    "\120\uffb1\001\002\000\026\002\uffa2\005\uffa2\010\uffa2\112" +
    "\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2" +
    "\001\002\000\026\002\uffaf\005\uffaf\010\uffaf\112\uffaf\113" +
    "\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\001\002" +
    "\000\026\002\uffa6\005\uffa6\010\uffa6\112\uffa6\113\uffa6\114" +
    "\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\001\002\000\010" +
    "\002\uff9e\112\uff9e\120\uff9e\001\002\000\010\002\uffe0\112" +
    "\uffe0\120\uffe0\001\002\000\010\002\uffdd\112\uffdd\120\uffdd" +
    "\001\002\000\012\002\uffe3\004\146\112\uffe3\120\uffe3\001" +
    "\002\000\016\010\076\113\uffed\114\uffed\115\uffed\116\uffed" +
    "\117\uffed\001\002\000\010\002\uffe2\112\uffe2\120\uffe2\001" +
    "\002\000\010\002\uffdc\112\uffdc\120\uffdc\001\002\000\004" +
    "\004\161\001\002\000\004\004\156\001\002\000\004\004" +
    "\154\001\002\000\004\011\155\001\002\000\010\002\uffb8" +
    "\112\uffb8\120\uffb8\001\002\000\006\011\157\012\160\001" +
    "\002\000\010\002\uffba\112\uffba\120\uffba\001\002\000\010" +
    "\002\uffb7\112\uffb7\120\uffb7\001\002\000\006\011\162\012" +
    "\163\001\002\000\010\002\uffb9\112\uffb9\120\uffb9\001\002" +
    "\000\010\002\uffb6\112\uffb6\120\uffb6\001\002\000\010\002" +
    "\uff9a\112\uff9a\120\uff9a\001\002\000\010\002\uff99\112\uff99" +
    "\120\uff99\001\002\000\020\005\170\010\076\113\uffed\114" +
    "\uffed\115\uffed\116\uffed\117\uffed\001\002\000\010\002\uff9d" +
    "\112\uff9d\120\uff9d\001\002\000\004\011\171\001\002\000" +
    "\004\006\172\001\002\000\010\002\uff9c\112\uff9c\120\uff9c" +
    "\001\002\000\004\004\174\001\002\000\004\005\175\001" +
    "\002\000\020\010\076\011\200\113\uffed\114\uffed\115\uffed" +
    "\116\uffed\117\uffed\001\002\000\004\006\204\001\002\000" +
    "\014\002\uffd4\004\uffd4\006\uffd4\112\uffd4\120\uffd4\001\002" +
    "\000\006\006\uffd3\007\201\001\002\000\016\010\076\113" +
    "\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000\004" +
    "\006\203\001\002\000\010\002\uffc3\112\uffc3\120\uffc3\001" +
    "\002\000\010\002\uffc4\112\uffc4\120\uffc4\001\002\000\010" +
    "\002\uff98\112\uff98\120\uff98\001\002\000\004\004\207\001" +
    "\002\000\020\010\076\011\211\113\uffed\114\uffed\115\uffed" +
    "\116\uffed\117\uffed\001\002\000\004\004\212\001\002\000" +
    "\012\002\uffd3\004\uffd3\112\uffd3\120\uffd3\001\002\000\004" +
    "\011\213\001\002\000\010\002\uffd2\112\uffd2\120\uffd2\001" +
    "\002\000\004\004\215\001\002\000\020\010\076\011\211" +
    "\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000" +
    "\010\002\uffc5\112\uffc5\120\uffc5\001\002\000\006\002\ufffc" +
    "\112\ufffc\001\002\000\010\002\uffe1\112\uffe1\120\uffe1\001" +
    "\002\000\010\002\uffc2\112\uffc2\120\uffc2\001\002\000\010" +
    "\002\uffc1\112\uffc1\120\uffc1\001\002\000\010\002\uffdb\112" +
    "\uffdb\120\uffdb\001\002\000\010\002\uff9b\112\uff9b\120\uff9b" +
    "\001\002\000\010\002\uffda\112\uffda\120\uffda\001\002\000" +
    "\006\002\ufffe\112\ufffe\001\002\000\020\005\231\010\076" +
    "\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000" +
    "\010\002\uffa0\112\uffa0\120\uffa0\001\002\000\004\011\232" +
    "\001\002\000\004\006\233\001\002\000\010\002\uff9f\112" +
    "\uff9f\120\uff9f\001\002\000\014\010\076\113\uffed\114\uffed" +
    "\115\uffed\116\uffed\001\002\000\012\113\102\114\104\115" +
    "\107\116\106\001\002\000\010\002\ufff3\112\ufff3\120\031" +
    "\001\002\000\006\002\uffe6\112\uffe6\001\002\000\010\002" +
    "\ufff3\112\ufff3\120\031\001\002\000\006\002\ufff8\112\ufff8" +
    "\001\002\000\006\002\ufffb\112\ufffb\001\002\000\010\002" +
    "\ufff3\112\ufff3\120\031\001\002\000\014\010\076\113\uffed" +
    "\114\uffed\115\uffed\116\uffed\001\002\000\012\113\102\114" +
    "\104\115\107\116\106\001\002\000\010\002\ufff3\112\ufff3" +
    "\120\031\001\002\000\006\002\uffe5\112\uffe5\001\002\000" +
    "\006\002\ufffd\112\ufffd\001\002\000\036\002\ufff5\003\005" +
    "\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\111\010\112\ufff5\117\006\120\ufff5\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\012\002\010\003\003\004\006\010\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\242" +
    "\013\042\014\065\015\064\016\017\017\070\020\044\022" +
    "\051\001\001\000\006\005\240\007\237\001\001\000\004" +
    "\004\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\022\006\016" +
    "\007\037\013\042\014\065\015\064\016\017\017\070\020" +
    "\044\022\051\001\001\000\004\023\226\001\001\000\004" +
    "\005\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\144\012\224\026\100\027\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\223\001\001\000" +
    "\012\011\144\012\222\026\100\027\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\217\001\001\000\004\005" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\165\001\001\000" +
    "\004\023\164\001\001\000\002\001\001\000\004\023\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\150\026\100\027\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\144\012\147\026\100\027\077\001\001" +
    "\000\012\011\144\012\143\026\100\027\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\142\026\100" +
    "\027\077\001\001\000\004\023\115\001\001\000\010\011" +
    "\076\026\100\027\077\001\001\000\004\025\110\001\001" +
    "\000\002\001\001\000\004\024\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\141\026\100\027\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\144\012" +
    "\146\026\100\027\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\166\026\100\027\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\176\021\175\026\100\027\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\201\026" +
    "\100\027\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\176\021\207\026\100\027\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\176\021\215\026\100" +
    "\027\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\227\026\100\027\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\100\027\234\001\001\000\004\024\235" +
    "\001\001\000\004\005\236\001\001\000\002\001\001\000" +
    "\004\005\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\247\001\001\000\006\026\100\027\244\001" +
    "\001\000\004\024\245\001\001\000\004\005\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\251\003" +
    "\003\004\006\010\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AssemblerLabels$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AssemblerLabels$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AssemblerLabels$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	LabelsMap.get().init();

    }


	public boolean error = false;
	
	public void report_error(String message, Object info) {
		error = true;
		StringBuffer m = new StringBuffer(); //"Sintaksna pogreska");
		SymLookup symLookup = new SymLookup();
		
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			m.append( "Sintaksna greska: " + symLookup.lookup(s.sym));
			if (s.left >= 0) {                
				m.append(" u retku "+(s.left+1));   
				if (s.right >= 0) {                    
					m.append(" i stupcu "+(s.right+1));
				}
			}
		}
		
		System.err.println(m.toString());
	}
    
	public boolean isError() {
		return error;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AssemblerLabels$actions {


	private Queue<String> cmdLblQueue = new LinkedList<String>();
	private final int B = 2;
	private final int O = 8;
	private final int D = 10;
	private final int H = 16;
	
	private int currentBase = H;
	
	private class NumBase {
		public String num;
		public int base;
		
		public NumBase(String num, int base) {
			this.num = num;
			this.base = base;
		}
	}
	
	private int intPow(int base, int exp) {
		int res = 1;
		
		for (int i = 1; i <= exp; i++) {
			res *= base;
		}
		
		return res;
	}
	
	private int convertFromBase(String num, int base) {
		int rez = 0;
		char[] digits = num.toLowerCase().toCharArray();
		
		for (int i = 0; i < digits.length; i++) {
			if (Character.isDigit(digits[i])) {
				rez += (digits[i] - '0')*intPow(base, i);
			} else if (Character.isLetter(digits[i])) {
				rez += (digits[i] - 'a' + 10)*intPow(base, i);
			} else {
				// error! Iako se ne bi smjelo dogoditi zbog lexa...
			}
		}
		
		return rez;
	}
	
	private Integer convertNum(String num, int orgBase, int destBase) {
		if (orgBase > destBase) {
			// error!
		}
		
		return Integer.valueOf(convertFromBase(num, destBase));
	}
	
	private void addLabel(String lbl) {
		if (this.cmdLblQueue.contains(lbl.toLowerCase())) {
			Postman.get().sendErrorMsg("Labela " + lbl + " je višestruko definirana!");
			
		} else {
			this.cmdLblQueue.offer(lbl.toLowerCase());
			
		}
	}
	
	private void addCommand() {
		this.cmdLblQueue.offer("$NAREDBA$");
	}
	
	private boolean containsLabel(String lbl) {
		return this.cmdLblQueue.contains(lbl.toLowerCase());
	}
	
	private void mapirajLabele() {
		int cmdNum = 0;
		while (!cmdLblQueue.isEmpty()) {
			String element = cmdLblQueue.poll();
			if (element.equals("$NAREDBA$")) {
				cmdNum+=4;
			} else {
				LabelsMap.get().mapLabel(element, Integer.valueOf(cmdNum));
			}
		}
	}

  private final AssemblerLabels parser;

  /** Constructor */
  CUP$AssemblerLabels$actions(AssemblerLabels parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AssemblerLabels$do_action(
    int                        CUP$AssemblerLabels$act_num,
    java_cup.runtime.lr_parser CUP$AssemblerLabels$parser,
    java.util.Stack            CUP$AssemblerLabels$stack,
    int                        CUP$AssemblerLabels$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AssemblerLabels$result;

      /* select the action based on the action number */
      switch (CUP$AssemblerLabels$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // upravljacka ::= HALT uvjetiUzPrazni 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // upravljacka ::= RETN uvjetiUzPrazni 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // upravljacka ::= RETI uvjetiUzPrazni 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // upravljacka ::= RET uvjetiUzPrazni 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // upravljacka ::= CALL uvjetiUzPrazni L_ZAGRADA REGISTAR D_ZAGRADA 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // upravljacka ::= CALL uvjetiUzPrazni konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // upravljacka ::= JR uvjetiUzPrazni konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // upravljacka ::= JP uvjetiUzPrazni L_ZAGRADA REGISTAR D_ZAGRADA 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // upravljacka ::= JP uvjetiUzPrazni konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("upravljacka",13, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // uvjetiUzPrazni ::= 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // uvjetiUzPrazni ::= UVJ_SGE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // uvjetiUzPrazni ::= UVJ_SLT 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // uvjetiUzPrazni ::= UVJ_SGT 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // uvjetiUzPrazni ::= UVJ_SLE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // uvjetiUzPrazni ::= UVJ_UGE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // uvjetiUzPrazni ::= UVJ_ULT 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // uvjetiUzPrazni ::= UVJ_UGT 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // uvjetiUzPrazni ::= UVJ_ULE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // uvjetiUzPrazni ::= UVJ_NE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // uvjetiUzPrazni ::= UVJ_EQ 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // uvjetiUzPrazni ::= UVJ_NZ 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // uvjetiUzPrazni ::= UVJ_Z 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // uvjetiUzPrazni ::= UVJ_P 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // uvjetiUzPrazni ::= UVJ_M 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // uvjetiUzPrazni ::= UVJ_NN 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // uvjetiUzPrazni ::= UVJ_N 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // uvjetiUzPrazni ::= UVJ_NV 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // uvjetiUzPrazni ::= UVJ_V 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // uvjetiUzPrazni ::= UVJ_NC 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // uvjetiUzPrazni ::= UVJ_C 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("uvjetiUzPrazni",17, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // registarska ::= MOVE konstantaIliLabela ZAREZ SR_REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarska",12, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // registarska ::= MOVE REGISTAR ZAREZ SR_REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarska",12, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // registarska ::= MOVE SR_REGISTAR ZAREZ REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarska",12, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // registarska ::= MOVE konstantaIliLabela ZAREZ REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarska",12, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // registarska ::= MOVE REGISTAR ZAREZ REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarska",12, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // memorijskaNaredba ::= STOREH 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // memorijskaNaredba ::= STOREB 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // memorijskaNaredba ::= STORE 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // memorijskaNaredba ::= LOADH 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // memorijskaNaredba ::= LOADB 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // memorijskaNaredba ::= LOAD 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijskaNaredba",16, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // memorijska ::= POP REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijska",11, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // memorijska ::= PUSH REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijska",11, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // memorijska ::= memorijskaNaredba REGISTAR ZAREZ L_ZAGRADA REGISTAR PLUS konstantaIliLabela D_ZAGRADA 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijska",11, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-7)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // memorijska ::= memorijskaNaredba REGISTAR ZAREZ L_ZAGRADA registarIlikonstantaIliLabela D_ZAGRADA 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("memorijska",11, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-5)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritLog2Arg ::= CMP REGISTAR ZAREZ registarIlikonstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog2Arg",10, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritLog3ArgNaredba ::= ROTR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritLog3ArgNaredba ::= ROTL 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aritLog3ArgNaredba ::= ASHR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // aritLog3ArgNaredba ::= SHR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // aritLog3ArgNaredba ::= SHL 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // aritLog3ArgNaredba ::= XOR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aritLog3ArgNaredba ::= OR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aritLog3ArgNaredba ::= AND 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aritLog3ArgNaredba ::= SBC 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aritLog3ArgNaredba ::= SUB 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aritLog3ArgNaredba ::= ADC 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aritLog3ArgNaredba ::= ADD 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3ArgNaredba",14, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aritLog3Arg ::= aritLog3ArgNaredba REGISTAR ZAREZ registarIlikonstantaIliLabela ZAREZ REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("aritLog3Arg",9, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-5)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // registarIlikonstantaIliLabela ::= REGISTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarIlikonstantaIliLabela",15, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // registarIlikonstantaIliLabela ::= konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("registarIlikonstantaIliLabela",15, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // naredba ::= upravljacka 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("naredba",4, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // naredba ::= registarska 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("naredba",4, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // naredba ::= memorijska 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("naredba",4, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // naredba ::= aritLog2Arg 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("naredba",4, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // naredba ::= aritLog3Arg 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("naredba",4, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pseudonaredba ::= DH nizKonstantiIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pseudonaredba ::= DB nizKonstantiIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pseudonaredba ::= DW nizKonstantiIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pseudonaredba ::= AP_DW nizKonstantiIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pseudonaredba ::= AP_DS konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pseudonaredba ::= AP_END 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pseudonaredba ::= AP_ORG konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pseudonaredba ::= AP_BASE tipBaze 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Integer tb = (Integer)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						currentBase = tb;
						RESULT = null;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("pseudonaredba",5, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nizKonstantiIliLabela ::= konstantaIliLabela ZAREZ nizKonstantiIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("nizKonstantiIliLabela",8, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nizKonstantiIliLabela ::= konstantaIliLabela 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("nizKonstantiIliLabela",8, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inlineBaza ::= PSEUDO_POSTO tipBaze 
            {
              Integer RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Integer tb = (Integer)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						RESULT = tb;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("inlineBaza",20, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // posebniSlucajevi ::= LABELA AP_EQU inlineBazaIliNe konstanta komentarIliNe 
            {
              Object RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).right;
		java.lang.String lbl = (java.lang.String)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).value;
		int ilbleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).left;
		int ilbright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).right;
		Integer ilb = (Integer)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).right;
		NumBase k = (NumBase)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).value;
		
							if (containsLabel(lbl)) {
								Postman.get().sendErrorMsg("Labela " + lbl + " je višestruko definirana!");
								
							} else {
								if (ilb == null) {
									LabelsMap.get().mapLabel(lbl.toLowerCase(), convertNum(k.num, k.base, currentBase));
								} else {
									LabelsMap.get().mapLabel(lbl.toLowerCase(), convertNum(k.num, k.base, ilb));
								}
							}
						
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("posebniSlucajevi",6, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // posebniSlucajevi ::= POCETNA_PRAZNINA LABELA AP_EQU inlineBazaIliNe konstanta komentarIliNe 
            {
              Object RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).right;
		java.lang.String lbl = (java.lang.String)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-4)).value;
		int ilbleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).left;
		int ilbright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).right;
		Integer ilb = (Integer)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).right;
		NumBase k = (NumBase)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).value;
		
							if (containsLabel(lbl)) {
								Postman.get().sendErrorMsg("Labela " + lbl + " je višestruko definirana!");
								
							} else {
								if (ilb == null) {
									LabelsMap.get().mapLabel(lbl.toLowerCase(), convertNum(k.num, k.base, currentBase));
								} else {
									LabelsMap.get().mapLabel(lbl.toLowerCase(), convertNum(k.num, k.base, ilb));
								}
							}
						
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("posebniSlucajevi",6, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-5)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // konstantaIliLabela ::= inlineBazaIliNe LABELA 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstantaIliLabela",7, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // konstantaIliLabela ::= inlineBazaIliNe konstanta 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstantaIliLabela",7, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // konstanta ::= HEKSA_KONSTANTA 
            {
              NumBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Symbol k = (Symbol)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						RESULT = new NumBase((String) k.value, H);
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstanta",18, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // konstanta ::= DEKADSKA_KONSTANTA 
            {
              NumBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Symbol k = (Symbol)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						RESULT = new NumBase((String) k.value, D);
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstanta",18, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // konstanta ::= OKTALNA_KONSTANTA 
            {
              NumBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Symbol k = (Symbol)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						RESULT = new NumBase((String) k.value, O);
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstanta",18, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // konstanta ::= BINARNA_KONSTANTA 
            {
              NumBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Symbol k = (Symbol)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						RESULT = new NumBase((String) k.value, B);
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("konstanta",18, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inlineBazaIliNe ::= 
            {
              Integer RESULT =null;
		
							RESULT = null;
						
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("inlineBazaIliNe",21, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inlineBazaIliNe ::= inlineBaza 
            {
              Integer RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		Integer ib = (Integer)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
							RESULT = ib;
						
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("inlineBazaIliNe",21, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipBaze ::= PSEUDO_O 
            {
              Integer RESULT =null;
		
						RESULT = O;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("tipBaze",19, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipBaze ::= PSEUDO_H 
            {
              Integer RESULT =null;
		
						RESULT = H;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("tipBaze",19, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipBaze ::= PSEUDO_D 
            {
              Integer RESULT =null;
		
						RESULT = D;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("tipBaze",19, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipBaze ::= PSEUDO_B 
            {
              Integer RESULT =null;
		
						RESULT = B;
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("tipBaze",19, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // komentarIliNe ::= 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("komentarIliNe",3, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // komentarIliNe ::= KOMENTAR 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("komentarIliNe",3, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // labelaIliNe ::= 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("labelaIliNe",2, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // labelaIliNe ::= LABELA 
            {
              Object RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()).right;
		java.lang.String lbl = (java.lang.String)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.peek()).value;
		
						addLabel(lbl);
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("labelaIliNe",2, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linijaSegment ::= error 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linijaSegment ::= labelaIliNe komentarIliNe 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linijaSegment ::= posebniSlucajevi 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // linijaSegment ::= POCETNA_PRAZNINA labelaIliNe komentarIliNe 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linijaSegment ::= labelaIliNe pseudonaredba komentarIliNe 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linijaSegment ::= POCETNA_PRAZNINA labelaIliNe pseudonaredba komentarIliNe 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linijaSegment ::= LABELA naredba komentarIliNe 
            {
              Object RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).right;
		java.lang.String lbl = (java.lang.String)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)).value;
		
						addLabel(lbl);
						addCommand();
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linijaSegment ::= POCETNA_PRAZNINA labelaIliNe naredba komentarIliNe 
            {
              Object RESULT =null;
		
						addCommand();
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linijaSegment",1, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-3)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // linija ::= linijaSegment 
            {
              Object RESULT =null;
		
						mapirajLabele();
					
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linija",0, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // linija ::= linijaSegment KRAJ_REDA linija 
            {
              Object RESULT =null;

              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("linija",0, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-2)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          return CUP$AssemblerLabels$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= linija EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)).value;
		RESULT = start_val;
              CUP$AssemblerLabels$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.elementAt(CUP$AssemblerLabels$top-1)), ((java_cup.runtime.Symbol)CUP$AssemblerLabels$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AssemblerLabels$parser.done_parsing();
          return CUP$AssemblerLabels$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

